/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mapeamento;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import mapeamento.ENUNS.Combate;
import mapeamento.ENUNS.DirecoesDoVento;
import mapeamento.beans.Talhao;
import mapeamento.beans.Tomates;
import mapeamento.beans.strategy.AbstractStrategyCombate;

/**
 *  SISTOM-4
 * @author Gustavo 
 * @creationDate 10/04/2016
 */
public class PainelDeSimulacao extends javax.swing.JPanel {

    private final String talhao;
    private final int umidade;
    private final Double temperaturaMedia;
    private final int quantidadeInteracao;
    //SISTOM-9
    private final DirecoesDoVento direcao;
    private final Double prec;
    private final Date data;
    private final int mediaHistorica;
    private static final SimpleDateFormat FORMATO_BR = new SimpleDateFormat("dd/MM/yyyy");
    private final MapaParaSimulacao mapaParaSimulacao;
    private final Automato automatoParaExecutar;
    private final MeuJPanel[][] matrizOriginal;
    private int contadorInteracao;
    MinhaThread thread = new MinhaThread();
    private final int X;
    private final int Y;
    
    private final Abertura rootFrame;
    private Combate combate;
    //private int duracaoDoCombateEmProgresso;

    /**
     *
     * @param frame
     * @param talhao
     * @param umid
     * @param temp
     * @param direcao
     * @param prec
     * @param data
     * @param mediaHistorica
     * @param qtdInter
     */
    public PainelDeSimulacao(Abertura frame, String talhao, int umid, Double temp, DirecoesDoVento direcao, Double prec, Date data, int mediaHistorica, int qtdInter)
    {
        this.talhao = talhao;
        this.umidade = umid;
        this.temperaturaMedia = temp;
        this.quantidadeInteracao = qtdInter;    
        this.direcao = direcao;
        this.prec = prec;
        this.data = data;
        this.mediaHistorica = mediaHistorica;
        initComponents();
        buttonProximo.setEnabled(false);
        mostrarVariaveisIniciais();
        MapaParaSimulacao mapaParaSimulacao = new MapaParaSimulacao(talhao);
        mapaParaSimulacao.setMinimumSize(new Dimension(400, 300));
        this.mapaParaSimulacao = mapaParaSimulacao;
        //desabilita botao Combate
        this.buttonCombate.setEnabled(false);
        this.rootFrame=frame;
        this.buttonReiniciar.setEnabled(false);
        
        
        final MeuJPanel[][] matrizpainel = mapaParaSimulacao.getMatrizpainel();
       
        Talhao talhaoBean = mapaParaSimulacao.getTalhao();
        
        this.X = talhaoBean.getQtd_TomatesPorLinhas();
        //considerando que cada rua tem 2 linhas.
        this.Y = talhaoBean.getQtdRuas() * 2;
        this.matrizOriginal = new MeuJPanel[X][Y];
        
         for (int i = 0; i < X; i++) {
            for (int j = 0; j < Y; j++) {
                this.matrizOriginal[i][j] = new MeuJPanel();
                Tomates novoTomate = matrizpainel[i][j].getTom().clone();
                this.matrizOriginal[i][j].setTom(novoTomate);
            }//for
        }//for 
        
        automatoParaExecutar = new Automato(talhaoBean, umid, temp, direcao, prec, data, mediaHistorica, qtdInter, matrizpainel, this);
        painelMapa.add(mapaParaSimulacao, BorderLayout.CENTER);
        this.contadorInteracao = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        textPanel_interacaoAtual = new javax.swing.JTextPane();
        textPaneI_separador = new javax.swing.JTextPane();
        textPaneI_interacaoMaxima = new javax.swing.JTextPane();
        buttonIniciar = new javax.swing.JButton();
        buttonProximo = new javax.swing.JButton();
        buttonCombate = new javax.swing.JButton();
        textPaneParametros = new javax.swing.JTextPane();
        buttonReiniciar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tituloPrevisao = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        textDiasFavoraveis = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textDiasFavoraveisSeguidos = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        tituloCombate = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textCombateCorrente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textDiasRestantes = new javax.swing.JTextField();
        painelMapa = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(400, 300));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        textPanel_interacaoAtual.setText("-");
        jPanel1.add(textPanel_interacaoAtual, new java.awt.GridBagConstraints());

        textPaneI_separador.setEditable(false);
        textPaneI_separador.setText("-");
        jPanel1.add(textPaneI_separador, new java.awt.GridBagConstraints());

        textPaneI_interacaoMaxima.setEditable(false);
        textPaneI_interacaoMaxima.setText("-");
        jPanel1.add(textPaneI_interacaoMaxima, new java.awt.GridBagConstraints());

        buttonIniciar.setText("Iniciar");
        buttonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonIniciarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1.add(buttonIniciar, gridBagConstraints);

        buttonProximo.setText("Proximo");
        buttonProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProximoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1.add(buttonProximo, gridBagConstraints);

        buttonCombate.setText("Combate");
        buttonCombate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buttonCombateStateChanged(evt);
            }
        });
        buttonCombate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCombateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1.add(buttonCombate, gridBagConstraints);

        textPaneParametros.setEditable(false);
        textPaneParametros.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1.add(textPaneParametros, gridBagConstraints);
        textPaneParametros.getAccessibleContext().setAccessibleParent(jPanel1);

        buttonReiniciar.setText("Reiniciar");
        buttonReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReiniciarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        jPanel1.add(buttonReiniciar, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        tituloPrevisao.setText("Previsão:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 15, 15);
        jPanel2.add(tituloPrevisao, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText("Dias Fav.:");
        jLabel1.setToolTipText("Quantidade de Didas favoráveis a Requeima.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel1, gridBagConstraints);

        textDiasFavoraveis.setEditable(false);
        textDiasFavoraveis.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textDiasFavoraveis.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDiasFavoraveis.setText("-");
        textDiasFavoraveis.setMinimumSize(new java.awt.Dimension(6, 25));
        textDiasFavoraveis.setPreferredSize(new java.awt.Dimension(25, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel2.add(textDiasFavoraveis, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("Dias Fav. Seguidos:");
        jLabel2.setToolTipText("Quantidade de dias seguidos favo´raveis a requeima.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel2, gridBagConstraints);

        textDiasFavoraveisSeguidos.setEditable(false);
        textDiasFavoraveisSeguidos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textDiasFavoraveisSeguidos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDiasFavoraveisSeguidos.setText("-");
        textDiasFavoraveisSeguidos.setPreferredSize(new java.awt.Dimension(25, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(textDiasFavoraveisSeguidos, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        tituloCombate.setText("Combate:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 15, 15);
        jPanel4.add(tituloCombate, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Nome:");
        jLabel3.setToolTipText("Quantidade de Didas favoráveis a Requeima.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel3, gridBagConstraints);

        textCombateCorrente.setEditable(false);
        textCombateCorrente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textCombateCorrente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textCombateCorrente.setText("-");
        textCombateCorrente.setMinimumSize(new java.awt.Dimension(6, 25));
        textCombateCorrente.setPreferredSize(new java.awt.Dimension(100, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel4.add(textCombateCorrente, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Dias Restantes:");
        jLabel4.setToolTipText("Quantidade de Didas favoráveis a Requeima.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel4, gridBagConstraints);

        textDiasRestantes.setEditable(false);
        textDiasRestantes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textDiasRestantes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDiasRestantes.setText("-");
        textDiasRestantes.setMinimumSize(new java.awt.Dimension(6, 25));
        textDiasRestantes.setPreferredSize(new java.awt.Dimension(25, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel4.add(textDiasRestantes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jPanel4, gridBagConstraints);

        painelMapa.setPreferredSize(new java.awt.Dimension(633, 364));
        painelMapa.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, Short.MAX_VALUE)
            .addComponent(painelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    //SISTOM-6
    private void buttonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonIniciarActionPerformed
                   if (!thread.isAlive()){
                       if (contadorInteracao == 0){
                            System.out.println("Inicia a thread pela primeira vez");
                            
                            thread.start(); 
                       }//if
                       else{
                          System.out.println("Restarta thread");
                          contadorInteracao = 0;
                          thread = new MinhaThread();
                          thread.start();
                       }  
                       buttonIniciar.setText("Pausar");
                    }//if
                    else{
                       if (!thread.pleaseWait) {
                           System.out.println("Pausa thread.");
                           buttonIniciar.setText("Continuar");
                            this.buttonCombate.setVisible(true);
                           // Pausa a thread
                           synchronized (thread) {
                               thread.pleaseWait = true;
                           }
                           
                           this.buttonProximo.setEnabled(true);
                       }
                       else{
                           System.out.println("Reinicia thread");
                           buttonIniciar.setText("Pausar");
                           // continua a thread
                           synchronized (thread) {
                               thread.pleaseWait = false;
                               thread.notify();
                           }
                           buttonProximo.setEnabled(false);
                       }
                       
                    }
                    this.buttonCombate.setEnabled(thread.pleaseWait && !automatoParaExecutar.combateEmProgresso()); 
                    this.buttonReiniciar.setEnabled(thread.pleaseWait);
               
    }//GEN-LAST:event_buttonIniciarActionPerformed
    //SISTOM-6
    private void buttonProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProximoActionPerformed
        if(thread.pleaseWait && contadorInteracao < quantidadeInteracao){
            try {
                System.out.println("proxima interação na thread thread");
                
                buttonProximo.setEnabled(false);
                //inicia para depois parar:
                synchronized (thread) {
                    thread.pleaseWait = false;
                    thread.notify();
                    
                }
                Thread.sleep(1000);
                synchronized (thread) {
                    thread.pleaseWait = true;
                }
                buttonProximo.setEnabled(true);
            } //if
            catch (InterruptedException ex) {
                Logger.getLogger(PainelDeSimulacao.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            buttonProximo.setEnabled(false);
        }
    }//GEN-LAST:event_buttonProximoActionPerformed

    private void buttonCombateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCombateActionPerformed

        EscolhaCombateDialog t1 = new EscolhaCombateDialog(this.rootFrame, true);
        t1.setTitle("Selecione o Combate");
        t1.setVisible(true);
        Combate resultado = t1.getResultado();
        if (resultado != null) {
            AbstractStrategyCombate strategy = resultado.getStrategy();
            String nome = strategy.getNome();
            int duracao = strategy.getDuracao();

            //SISTOM-19
            this.getTextCombateCorrente().setText(nome);
            this.getTextDiasRestantes().setText(Integer.toString(duracao));

            this.automatoParaExecutar.setCombate(resultado);
        }

    }//GEN-LAST:event_buttonCombateActionPerformed

    private void buttonCombateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buttonCombateStateChanged
    }//GEN-LAST:event_buttonCombateStateChanged

    private void buttonReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReiniciarActionPerformed
        // SISTOM-17
        PainelDeSimulacao janela = new PainelDeSimulacao(rootFrame, talhao, umidade, temperaturaMedia, direcao, prec, data, mediaHistorica, quantidadeInteracao);
        this.thread.interrupt();
        this.rootFrame.mudaTela(janela);

    }//GEN-LAST:event_buttonReiniciarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCombate;
    private javax.swing.JButton buttonIniciar;
    private javax.swing.JButton buttonProximo;
    private javax.swing.JButton buttonReiniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel painelMapa;
    private javax.swing.JTextField textCombateCorrente;
    private javax.swing.JTextField textDiasFavoraveis;
    private javax.swing.JTextField textDiasFavoraveisSeguidos;
    private javax.swing.JTextField textDiasRestantes;
    private javax.swing.JTextPane textPaneI_interacaoMaxima;
    private javax.swing.JTextPane textPaneI_separador;
    private javax.swing.JTextPane textPaneParametros;
    private javax.swing.JTextPane textPanel_interacaoAtual;
    private javax.swing.JLabel tituloCombate;
    private javax.swing.JLabel tituloPrevisao;
    // End of variables declaration//GEN-END:variables

    private void mostrarVariaveisIniciais() {
        textPanel_interacaoAtual.setText("0");
        textPaneI_interacaoMaxima.setText(Integer.toString(getQuantidadeInteracao()));
        
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Umid.: ");
        stringBuilder.append(getUmidade());
        stringBuilder.append(",");
        stringBuilder.append(" Temp.: ");
         stringBuilder.append(getTemperaturaMedia());
          stringBuilder.append(",");
         stringBuilder.append(" Chuv.: ");
         stringBuilder.append(getPrec());
          stringBuilder.append(",");
          stringBuilder.append(" Direç.: ");
         stringBuilder.append(getDirecao().getValor());
          stringBuilder.append(",");
          stringBuilder.append(" Data.: ");
         stringBuilder.append(FORMATO_BR.format(getData()));
          stringBuilder.append(",");
          stringBuilder.append(" Média Hist.: ");
         stringBuilder.append(getMediaHistorica());
        final String string = stringBuilder.toString();
        
        textPaneParametros.setText(string);
    }

    /**
     * @return the umidade
     */
    public int getUmidade() {
        return umidade;
    }

    /**
     * @return the temperaturaMedia
     */
    public Double getTemperaturaMedia() {
        return temperaturaMedia;
    }

    /**
     * @return the quantidadeInteracao
     */
    public int getQuantidadeInteracao() {
        return quantidadeInteracao;
    }

    /**
     * @return the direcao
     */
    public DirecoesDoVento getDirecao() {
        return direcao;
    }

    /**
     * @return the prec
     */
    public Double getPrec() {
        return prec;
    }

    /**
     * @return the data
     */
    public Date getData() {
        return data;
    }

    /**
     * @return the mediaHistorica
     */
    public int getMediaHistorica() {
        return mediaHistorica;
    }

    /**
     * @return the mapaParaSimulacao
     */
    public MapaParaSimulacao getMapaParaSimulacao() {
        return mapaParaSimulacao;
    }

    /**
     * @return the textDiasFavoraveis
     */
    public javax.swing.JTextField getTextDiasFavoraveis() {
        return textDiasFavoraveis;
    }

    /**
     * @param textDiasFavoraveis the textDiasFavoraveis to set
     */
    public void setTextDiasFavoraveis(javax.swing.JTextField textDiasFavoraveis) {
        this.textDiasFavoraveis = textDiasFavoraveis;
    }

    /**
     * @return the textDiasFavoraveisSeguidos
     */
    public javax.swing.JTextField getTextDiasFavoraveisSeguidos() {
        return textDiasFavoraveisSeguidos;
    }

    /**
     * @param textDiasFavoraveisSeguidos the textDiasFavoraveisSeguidos to set
     */
    public void setTextDiasFavoraveisSeguidos(javax.swing.JTextField textDiasFavoraveisSeguidos) {
        this.textDiasFavoraveisSeguidos = textDiasFavoraveisSeguidos;
    }

    /**
     * @return the textCombateCorrente
     */
    public javax.swing.JTextField getTextCombateCorrente() {
        return textCombateCorrente;
    }

    /**
     * @param textCombateCorrente the textCombateCorrente to set
     */
    public void setTextCombateCorrente(javax.swing.JTextField textCombateCorrente) {
        this.textCombateCorrente = textCombateCorrente;
    }

    /**
     * @return the textDiasRestantes
     */
    public javax.swing.JTextField getTextDiasRestantes() {
        return textDiasRestantes;
    }

    /**
     * @param textDiasRestantes the textDiasRestantes to set
     */
    public void setTextDiasRestantes(javax.swing.JTextField textDiasRestantes) {
        this.textDiasRestantes = textDiasRestantes;
    }
    //SISTOM-6
    class MinhaThread extends Thread {

        boolean pleaseWait = false;

        @Override
        public void run() {
            textPanel_interacaoAtual.setText("0");
            int i, j;
            while (!this.isInterrupted() && contadorInteracao < quantidadeInteracao) {

                GregorianCalendar calendar = new GregorianCalendar();
                
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(PainelDeSimulacao.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Interacao: " + (contadorInteracao+1));
                textPanel_interacaoAtual.setText(Integer.toString(contadorInteracao+1));
                Date data;
                if (contadorInteracao > 0) {
                    calendar.setTime(getData());
                    calendar.add(Calendar.DAY_OF_MONTH, contadorInteracao);
                    data = calendar.getTime();
                }//if
                else {
                    data = getData();
                }//else
                automatoParaExecutar.calculaRiscos(data);

                automatoParaExecutar.imprime();
                
                MeuJPanel[][] matrizpainel = mapaParaSimulacao.getMatrizpainel();
                
                final MeuJPanel[][] iteracao = automatoParaExecutar.iteracao(matrizpainel);
                
                //Faz com que as alterações dos estados sejam vistas no painel de simulação
                for (i = 0; i < X; i++) {
                    for (j = 0; j < Y; j++) {
                        matrizpainel[i][j].setTom(iteracao[i][j].getTom());
                    }//for
                }//for
                
                //o repaint do mapa ja resolve
                //mapaParaSimulacao.repintaTodosAsCelulas();

                mapaParaSimulacao.repaint();
                
                contadorInteracao++;
                
                //Caso parar entra aqui
                synchronized (this) {
                    while (pleaseWait) {
                        try {
                            //fica aqui até clicar no botão continuar
                            wait();
                        } catch (Exception e) {
                            System.out.println("Erro ao fazer thread esperar: " + e.getStackTrace());
                        }
                    }
                }
               
            }//while
            
            this.interrupt();
            buttonIniciar.setText("Iniciar");
            buttonProximo.setEnabled(false);
        }//run

    }//class
}
