#dataDeInício: 27/03/2016

SISTOM-1<sucupira>: Usar os novos campos adicionadas na v1_to_v2 para gerar o mapa do talhao.
- A nova forma de calcular a dimensão da matriz(talhao) é:
y= qtd de ruas do talhão * 2(ca rua possui linhas a e b)
x= qtd de tomateiros por linha no talhão

- Para encaixar o tomateiro do bd na celula da matriz referente, foi feito a seguinte l[ogica:
O x é igual ao NumTom do tomaterio
-- Se a linha do tomateiro for "a". o y será rua + (rua - 1)
-- Caso contrário o y será rua * 2

- Foi adicinado um label com um "*" nas células que possuem tomateiros cadastrados na base.

- *Falta fazer*: As outras células da matriz que não possuem tomateiros da base devem se apresentar como um tomateiro com estado 1:*DONE*
-- na classe Mapa.java foi trocado o a cor padrão das células de Silver para Green(que é a cor do tomateiro mais sadio). 

SISTOM-2<sucupira>: Alterar nome da entidade "lavoura" para "talhão" e criar bean referente.
- Foi feita a alteração da base v3_to_v4, e foi feita a alteração de todas as consultas que tinha lavoura e trocado para talhao. Foi cansativo pois 
as queries estão soltas nos sistema.
- Foi criado o bean Talhao.java. Entretanto, não usei ainda...

- *Falta Fazer*: Montar bean talhao nas consultas que busca talhoes.

SISTOM-3<sucupira>: Refactor >> Montar estrutura DAO para padronizar código.
- As Estruturas DAO Criada:
--TomatesDAO -> Referente a todas as consultas com retorno de elementos de Tomates
--TalhaoDAO -> Referente a todas as consultas com retorno de elementos de Talhao
--ImagemProcessadaDao -> Referente a todas as consultas com retorno de elementos de ImagemProcessada
Obs. Criamos o bean de ImagemProcessada que antes era alocado dentro do bean Tomates

- Colocar todas as consultas do sistema na DAO relacionada ao bean retornado.
-- Abertura OK - Testes OK
-- PDI e Processamento OK - Testes OK
-- Mapa e TomateDialog OK - Testes OK
IMPORTANTE:
*A partir de agora só podemos fazer consultas ao banco nas classes DAO!*

SISTOM-4<sucupira>: Criar classe do automato e alterar tela de simulação;
Foi criado a classe do Autometo, entretanto está apenas no início da adaptação, pois teremos que definir o processo da simulação
até chegar nela.
Em Preencher_Variaveis.java foi removido os campos que não precisão mais, deixando apenas os campos "Humidade Rel. do Ar", 
" índice pluviométrico:", além da quatidade de interações.
Foi feito a tela da simulação que recebe o mapa atual do talhao, porém, pode ser que necessitamos de uma outra classe de mapa porque todos 
os elementos do mapa precisam de um estado(mesmo os que não estão na base).
- Foi criado uma nova classe(MapaParaSimulacao.java) baseado no Mapa.java; A dieferença é que esta criará um grid, em que cada elemente receberá um bean de Tomates, 
porque para simulação, calcularemos o próximo estado dos elementos de acordo com a situação dos seus vizinhos.
- Falta fazer: Vincular a classe do automato na tela da simulação.*DONE*
-- Alterei a matriz, o que antes era matriz de inteiro comum, para uma matriz de meu MeuJPanel, que é o Panel usado para os grids que representam um tomateiro 
e que logicamente possuem uma classe Tomates na sua composição. Contudo tem o estado que o automato necessita, não perdendo a estrutura do mapa.

SISTOM-5<sucupira>: Mudar a organização dos estados, que atualmente está de 0-6, para 0-5. Pois na forma antiga o valor 0 nunca é usado;
- Impacto: com essa alteração, os tomates que tiverem menor ou igual a 3% de infecção não terá influencia para infectar vizinhos(levando em consideração o estado), 
pois ele estará com o estado 0.
- Aguandando a opnião da G. Kupac para a alteração
- Dúvida encontrada: A função setGradKey() na classe imagem não está coerente com a escala de estados nos artigos feitos, a função retorna o estado que a taxa é por aproximação.
Está certo isso? > Em testes feitos os resuldos seguem:
-- gk = 4 / resultado: estado 1 / de acordo com a metodologia dos artigos o resultado deveria ser: 2
-- gk = 13 / resultado: estado 2 / de acordo com a metodologia dos artigos o resultado deveria ser: 3

SISTOM-6<sucupira>: Fazer a animação(em java) dos paineis da tela de simulação.